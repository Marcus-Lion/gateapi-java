/*
 * Gate API v4
 * APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.api;

import io.gate.gateapi.ApiCallback;
import io.gate.gateapi.ApiClient;
import io.gate.gateapi.ApiException;
import io.gate.gateapi.ApiResponse;
import io.gate.gateapi.Configuration;
import io.gate.gateapi.Pair;
import io.gate.gateapi.ProgressRequestBody;
import io.gate.gateapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.gate.gateapi.models.DeliveryContract;
import io.gate.gateapi.models.DeliverySettlement;
import io.gate.gateapi.models.FuturesAccount;
import io.gate.gateapi.models.FuturesAccountBook;
import io.gate.gateapi.models.FuturesCandlestick;
import io.gate.gateapi.models.FuturesLiquidate;
import io.gate.gateapi.models.FuturesOrder;
import io.gate.gateapi.models.FuturesOrderBook;
import io.gate.gateapi.models.FuturesPriceTriggeredOrder;
import io.gate.gateapi.models.FuturesTicker;
import io.gate.gateapi.models.FuturesTrade;
import io.gate.gateapi.models.InsuranceRecord;
import io.gate.gateapi.models.MyFuturesTrade;
import io.gate.gateapi.models.Position;
import io.gate.gateapi.models.PositionClose;
import io.gate.gateapi.models.TriggerOrderResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeliveryApi {
    private ApiClient apiClient;

    public DeliveryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeliveryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for cancelDeliveryOrder
     * @param settle Settle currency (required)
     * @param orderId ID returned on order successfully being created (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelDeliveryOrderCall(String settle, String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/orders/{order_id}"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()))
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelDeliveryOrderValidateBeforeCall(String settle, String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling cancelDeliveryOrder(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling cancelDeliveryOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelDeliveryOrderCall(settle, orderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel a single order
     * 
     * @param settle Settle currency (required)
     * @param orderId ID returned on order successfully being created (required)
     * @return FuturesOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FuturesOrder cancelDeliveryOrder(String settle, String orderId) throws ApiException {
        ApiResponse<FuturesOrder> resp = cancelDeliveryOrderWithHttpInfo(settle, orderId);
        return resp.getData();
    }

    /**
     * Cancel a single order
     * 
     * @param settle Settle currency (required)
     * @param orderId ID returned on order successfully being created (required)
     * @return ApiResponse&lt;FuturesOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FuturesOrder> cancelDeliveryOrderWithHttpInfo(String settle, String orderId) throws ApiException {
        com.squareup.okhttp.Call call = cancelDeliveryOrderValidateBeforeCall(settle, orderId, null, null);
        Type localVarReturnType = new TypeToken<FuturesOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a single order (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param orderId ID returned on order successfully being created (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelDeliveryOrderAsync(String settle, String orderId, final ApiCallback<FuturesOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelDeliveryOrderValidateBeforeCall(settle, orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FuturesOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cancelDeliveryOrders
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param side All bids or asks. Both included in not specified (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelDeliveryOrdersCall(String settle, String contract, String side, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/orders"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contract != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contract", contract));
        }

        if (side != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("side", side));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelDeliveryOrdersValidateBeforeCall(String settle, String contract, String side, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling cancelDeliveryOrders(Async)");
        }
        
        // verify the required parameter 'contract' is set
        if (contract == null) {
            throw new ApiException("Missing the required parameter 'contract' when calling cancelDeliveryOrders(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelDeliveryOrdersCall(settle, contract, side, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel all &#x60;open&#x60; orders matched
     * Zero-fill order cannot be retrieved 60 seconds after cancellation
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param side All bids or asks. Both included in not specified (optional)
     * @return List&lt;FuturesOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FuturesOrder> cancelDeliveryOrders(String settle, String contract, String side) throws ApiException {
        ApiResponse<List<FuturesOrder>> resp = cancelDeliveryOrdersWithHttpInfo(settle, contract, side);
        return resp.getData();
    }

    /**
     * Cancel all &#x60;open&#x60; orders matched
     * Zero-fill order cannot be retrieved 60 seconds after cancellation
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param side All bids or asks. Both included in not specified (optional)
     * @return ApiResponse&lt;List&lt;FuturesOrder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FuturesOrder>> cancelDeliveryOrdersWithHttpInfo(String settle, String contract, String side) throws ApiException {
        com.squareup.okhttp.Call call = cancelDeliveryOrdersValidateBeforeCall(settle, contract, side, null, null);
        Type localVarReturnType = new TypeToken<List<FuturesOrder>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel all &#x60;open&#x60; orders matched (asynchronously)
     * Zero-fill order cannot be retrieved 60 seconds after cancellation
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param side All bids or asks. Both included in not specified (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelDeliveryOrdersAsync(String settle, String contract, String side, final ApiCallback<List<FuturesOrder>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelDeliveryOrdersValidateBeforeCall(settle, contract, side, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FuturesOrder>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cancelPriceTriggeredDeliveryOrder
     * @param settle Settle currency (required)
     * @param orderId ID returned on order successfully being created (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelPriceTriggeredDeliveryOrderCall(String settle, String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/price_orders/{order_id}"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()))
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelPriceTriggeredDeliveryOrderValidateBeforeCall(String settle, String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling cancelPriceTriggeredDeliveryOrder(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling cancelPriceTriggeredDeliveryOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelPriceTriggeredDeliveryOrderCall(settle, orderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel a single order
     * 
     * @param settle Settle currency (required)
     * @param orderId ID returned on order successfully being created (required)
     * @return FuturesPriceTriggeredOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FuturesPriceTriggeredOrder cancelPriceTriggeredDeliveryOrder(String settle, String orderId) throws ApiException {
        ApiResponse<FuturesPriceTriggeredOrder> resp = cancelPriceTriggeredDeliveryOrderWithHttpInfo(settle, orderId);
        return resp.getData();
    }

    /**
     * Cancel a single order
     * 
     * @param settle Settle currency (required)
     * @param orderId ID returned on order successfully being created (required)
     * @return ApiResponse&lt;FuturesPriceTriggeredOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FuturesPriceTriggeredOrder> cancelPriceTriggeredDeliveryOrderWithHttpInfo(String settle, String orderId) throws ApiException {
        com.squareup.okhttp.Call call = cancelPriceTriggeredDeliveryOrderValidateBeforeCall(settle, orderId, null, null);
        Type localVarReturnType = new TypeToken<FuturesPriceTriggeredOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel a single order (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param orderId ID returned on order successfully being created (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelPriceTriggeredDeliveryOrderAsync(String settle, String orderId, final ApiCallback<FuturesPriceTriggeredOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelPriceTriggeredDeliveryOrderValidateBeforeCall(settle, orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FuturesPriceTriggeredOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for cancelPriceTriggeredDeliveryOrderList
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call cancelPriceTriggeredDeliveryOrderListCall(String settle, String contract, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/price_orders"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contract != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contract", contract));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call cancelPriceTriggeredDeliveryOrderListValidateBeforeCall(String settle, String contract, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling cancelPriceTriggeredDeliveryOrderList(Async)");
        }
        
        // verify the required parameter 'contract' is set
        if (contract == null) {
            throw new ApiException("Missing the required parameter 'contract' when calling cancelPriceTriggeredDeliveryOrderList(Async)");
        }
        

        com.squareup.okhttp.Call call = cancelPriceTriggeredDeliveryOrderListCall(settle, contract, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel all open orders
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @return List&lt;FuturesPriceTriggeredOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FuturesPriceTriggeredOrder> cancelPriceTriggeredDeliveryOrderList(String settle, String contract) throws ApiException {
        ApiResponse<List<FuturesPriceTriggeredOrder>> resp = cancelPriceTriggeredDeliveryOrderListWithHttpInfo(settle, contract);
        return resp.getData();
    }

    /**
     * Cancel all open orders
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @return ApiResponse&lt;List&lt;FuturesPriceTriggeredOrder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FuturesPriceTriggeredOrder>> cancelPriceTriggeredDeliveryOrderListWithHttpInfo(String settle, String contract) throws ApiException {
        com.squareup.okhttp.Call call = cancelPriceTriggeredDeliveryOrderListValidateBeforeCall(settle, contract, null, null);
        Type localVarReturnType = new TypeToken<List<FuturesPriceTriggeredOrder>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Cancel all open orders (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call cancelPriceTriggeredDeliveryOrderListAsync(String settle, String contract, final ApiCallback<List<FuturesPriceTriggeredOrder>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = cancelPriceTriggeredDeliveryOrderListValidateBeforeCall(settle, contract, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FuturesPriceTriggeredOrder>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDeliveryOrder
     * @param settle Settle currency (required)
     * @param futuresOrder  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDeliveryOrderCall(String settle, FuturesOrder futuresOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = futuresOrder;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/orders"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDeliveryOrderValidateBeforeCall(String settle, FuturesOrder futuresOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling createDeliveryOrder(Async)");
        }
        
        // verify the required parameter 'futuresOrder' is set
        if (futuresOrder == null) {
            throw new ApiException("Missing the required parameter 'futuresOrder' when calling createDeliveryOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = createDeliveryOrderCall(settle, futuresOrder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a futures order
     * Zero-fill order cannot be retrieved 60 seconds after cancellation
     * @param settle Settle currency (required)
     * @param futuresOrder  (required)
     * @return FuturesOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FuturesOrder createDeliveryOrder(String settle, FuturesOrder futuresOrder) throws ApiException {
        ApiResponse<FuturesOrder> resp = createDeliveryOrderWithHttpInfo(settle, futuresOrder);
        return resp.getData();
    }

    /**
     * Create a futures order
     * Zero-fill order cannot be retrieved 60 seconds after cancellation
     * @param settle Settle currency (required)
     * @param futuresOrder  (required)
     * @return ApiResponse&lt;FuturesOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FuturesOrder> createDeliveryOrderWithHttpInfo(String settle, FuturesOrder futuresOrder) throws ApiException {
        com.squareup.okhttp.Call call = createDeliveryOrderValidateBeforeCall(settle, futuresOrder, null, null);
        Type localVarReturnType = new TypeToken<FuturesOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a futures order (asynchronously)
     * Zero-fill order cannot be retrieved 60 seconds after cancellation
     * @param settle Settle currency (required)
     * @param futuresOrder  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDeliveryOrderAsync(String settle, FuturesOrder futuresOrder, final ApiCallback<FuturesOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDeliveryOrderValidateBeforeCall(settle, futuresOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FuturesOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPriceTriggeredDeliveryOrder
     * @param settle Settle currency (required)
     * @param futuresPriceTriggeredOrder  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPriceTriggeredDeliveryOrderCall(String settle, FuturesPriceTriggeredOrder futuresPriceTriggeredOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = futuresPriceTriggeredOrder;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/price_orders"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPriceTriggeredDeliveryOrderValidateBeforeCall(String settle, FuturesPriceTriggeredOrder futuresPriceTriggeredOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling createPriceTriggeredDeliveryOrder(Async)");
        }
        
        // verify the required parameter 'futuresPriceTriggeredOrder' is set
        if (futuresPriceTriggeredOrder == null) {
            throw new ApiException("Missing the required parameter 'futuresPriceTriggeredOrder' when calling createPriceTriggeredDeliveryOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = createPriceTriggeredDeliveryOrderCall(settle, futuresPriceTriggeredOrder, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a price-triggered order
     * 
     * @param settle Settle currency (required)
     * @param futuresPriceTriggeredOrder  (required)
     * @return TriggerOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TriggerOrderResponse createPriceTriggeredDeliveryOrder(String settle, FuturesPriceTriggeredOrder futuresPriceTriggeredOrder) throws ApiException {
        ApiResponse<TriggerOrderResponse> resp = createPriceTriggeredDeliveryOrderWithHttpInfo(settle, futuresPriceTriggeredOrder);
        return resp.getData();
    }

    /**
     * Create a price-triggered order
     * 
     * @param settle Settle currency (required)
     * @param futuresPriceTriggeredOrder  (required)
     * @return ApiResponse&lt;TriggerOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TriggerOrderResponse> createPriceTriggeredDeliveryOrderWithHttpInfo(String settle, FuturesPriceTriggeredOrder futuresPriceTriggeredOrder) throws ApiException {
        com.squareup.okhttp.Call call = createPriceTriggeredDeliveryOrderValidateBeforeCall(settle, futuresPriceTriggeredOrder, null, null);
        Type localVarReturnType = new TypeToken<TriggerOrderResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a price-triggered order (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param futuresPriceTriggeredOrder  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPriceTriggeredDeliveryOrderAsync(String settle, FuturesPriceTriggeredOrder futuresPriceTriggeredOrder, final ApiCallback<TriggerOrderResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPriceTriggeredDeliveryOrderValidateBeforeCall(settle, futuresPriceTriggeredOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TriggerOrderResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeliveryContract
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeliveryContractCall(String settle, String contract, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/contracts/{contract}"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()))
            .replaceAll("\\{" + "contract" + "\\}", apiClient.escapeString(contract.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeliveryContractValidateBeforeCall(String settle, String contract, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling getDeliveryContract(Async)");
        }
        
        // verify the required parameter 'contract' is set
        if (contract == null) {
            throw new ApiException("Missing the required parameter 'contract' when calling getDeliveryContract(Async)");
        }
        

        com.squareup.okhttp.Call call = getDeliveryContractCall(settle, contract, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a single contract
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @return DeliveryContract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeliveryContract getDeliveryContract(String settle, String contract) throws ApiException {
        ApiResponse<DeliveryContract> resp = getDeliveryContractWithHttpInfo(settle, contract);
        return resp.getData();
    }

    /**
     * Get a single contract
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @return ApiResponse&lt;DeliveryContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeliveryContract> getDeliveryContractWithHttpInfo(String settle, String contract) throws ApiException {
        com.squareup.okhttp.Call call = getDeliveryContractValidateBeforeCall(settle, contract, null, null);
        Type localVarReturnType = new TypeToken<DeliveryContract>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single contract (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeliveryContractAsync(String settle, String contract, final ApiCallback<DeliveryContract> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeliveryContractValidateBeforeCall(settle, contract, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeliveryContract>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeliveryOrder
     * @param settle Settle currency (required)
     * @param orderId ID returned on order successfully being created (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeliveryOrderCall(String settle, String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/orders/{order_id}"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()))
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeliveryOrderValidateBeforeCall(String settle, String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling getDeliveryOrder(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getDeliveryOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = getDeliveryOrderCall(settle, orderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a single order
     * Zero-fill order cannot be retrieved 60 seconds after cancellation
     * @param settle Settle currency (required)
     * @param orderId ID returned on order successfully being created (required)
     * @return FuturesOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FuturesOrder getDeliveryOrder(String settle, String orderId) throws ApiException {
        ApiResponse<FuturesOrder> resp = getDeliveryOrderWithHttpInfo(settle, orderId);
        return resp.getData();
    }

    /**
     * Get a single order
     * Zero-fill order cannot be retrieved 60 seconds after cancellation
     * @param settle Settle currency (required)
     * @param orderId ID returned on order successfully being created (required)
     * @return ApiResponse&lt;FuturesOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FuturesOrder> getDeliveryOrderWithHttpInfo(String settle, String orderId) throws ApiException {
        com.squareup.okhttp.Call call = getDeliveryOrderValidateBeforeCall(settle, orderId, null, null);
        Type localVarReturnType = new TypeToken<FuturesOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single order (asynchronously)
     * Zero-fill order cannot be retrieved 60 seconds after cancellation
     * @param settle Settle currency (required)
     * @param orderId ID returned on order successfully being created (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeliveryOrderAsync(String settle, String orderId, final ApiCallback<FuturesOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeliveryOrderValidateBeforeCall(settle, orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FuturesOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeliveryPosition
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeliveryPositionCall(String settle, String contract, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/positions/{contract}"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()))
            .replaceAll("\\{" + "contract" + "\\}", apiClient.escapeString(contract.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeliveryPositionValidateBeforeCall(String settle, String contract, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling getDeliveryPosition(Async)");
        }
        
        // verify the required parameter 'contract' is set
        if (contract == null) {
            throw new ApiException("Missing the required parameter 'contract' when calling getDeliveryPosition(Async)");
        }
        

        com.squareup.okhttp.Call call = getDeliveryPositionCall(settle, contract, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get single position
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @return Position
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Position getDeliveryPosition(String settle, String contract) throws ApiException {
        ApiResponse<Position> resp = getDeliveryPositionWithHttpInfo(settle, contract);
        return resp.getData();
    }

    /**
     * Get single position
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @return ApiResponse&lt;Position&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Position> getDeliveryPositionWithHttpInfo(String settle, String contract) throws ApiException {
        com.squareup.okhttp.Call call = getDeliveryPositionValidateBeforeCall(settle, contract, null, null);
        Type localVarReturnType = new TypeToken<Position>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get single position (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeliveryPositionAsync(String settle, String contract, final ApiCallback<Position> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeliveryPositionValidateBeforeCall(settle, contract, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Position>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMyDeliveryTrades
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param order Futures order ID, return related data only if specified (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @param lastId Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param countTotal Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMyDeliveryTradesCall(String settle, String contract, Integer order, Integer limit, Integer offset, String lastId, Integer countTotal, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/my_trades"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contract != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contract", contract));
        }

        if (order != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
        }

        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        }

        if (lastId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("last_id", lastId));
        }

        if (countTotal != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("count_total", countTotal));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMyDeliveryTradesValidateBeforeCall(String settle, String contract, Integer order, Integer limit, Integer offset, String lastId, Integer countTotal, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling getMyDeliveryTrades(Async)");
        }
        

        com.squareup.okhttp.Call call = getMyDeliveryTradesCall(settle, contract, order, limit, offset, lastId, countTotal, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List personal trading history
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param order Futures order ID, return related data only if specified (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @param lastId Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param countTotal Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     * @return List&lt;MyFuturesTrade&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MyFuturesTrade> getMyDeliveryTrades(String settle, String contract, Integer order, Integer limit, Integer offset, String lastId, Integer countTotal) throws ApiException {
        ApiResponse<List<MyFuturesTrade>> resp = getMyDeliveryTradesWithHttpInfo(settle, contract, order, limit, offset, lastId, countTotal);
        return resp.getData();
    }

    /**
     * List personal trading history
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param order Futures order ID, return related data only if specified (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @param lastId Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param countTotal Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     * @return ApiResponse&lt;List&lt;MyFuturesTrade&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MyFuturesTrade>> getMyDeliveryTradesWithHttpInfo(String settle, String contract, Integer order, Integer limit, Integer offset, String lastId, Integer countTotal) throws ApiException {
        com.squareup.okhttp.Call call = getMyDeliveryTradesValidateBeforeCall(settle, contract, order, limit, offset, lastId, countTotal, null, null);
        Type localVarReturnType = new TypeToken<List<MyFuturesTrade>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List personal trading history (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param order Futures order ID, return related data only if specified (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @param lastId Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param countTotal Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMyDeliveryTradesAsync(String settle, String contract, Integer order, Integer limit, Integer offset, String lastId, Integer countTotal, final ApiCallback<List<MyFuturesTrade>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMyDeliveryTradesValidateBeforeCall(settle, contract, order, limit, offset, lastId, countTotal, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MyFuturesTrade>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPriceTriggeredDeliveryOrder
     * @param settle Settle currency (required)
     * @param orderId ID returned on order successfully being created (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPriceTriggeredDeliveryOrderCall(String settle, String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/price_orders/{order_id}"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()))
            .replaceAll("\\{" + "order_id" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPriceTriggeredDeliveryOrderValidateBeforeCall(String settle, String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling getPriceTriggeredDeliveryOrder(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getPriceTriggeredDeliveryOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = getPriceTriggeredDeliveryOrderCall(settle, orderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a single order
     * 
     * @param settle Settle currency (required)
     * @param orderId ID returned on order successfully being created (required)
     * @return FuturesPriceTriggeredOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FuturesPriceTriggeredOrder getPriceTriggeredDeliveryOrder(String settle, String orderId) throws ApiException {
        ApiResponse<FuturesPriceTriggeredOrder> resp = getPriceTriggeredDeliveryOrderWithHttpInfo(settle, orderId);
        return resp.getData();
    }

    /**
     * Get a single order
     * 
     * @param settle Settle currency (required)
     * @param orderId ID returned on order successfully being created (required)
     * @return ApiResponse&lt;FuturesPriceTriggeredOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FuturesPriceTriggeredOrder> getPriceTriggeredDeliveryOrderWithHttpInfo(String settle, String orderId) throws ApiException {
        com.squareup.okhttp.Call call = getPriceTriggeredDeliveryOrderValidateBeforeCall(settle, orderId, null, null);
        Type localVarReturnType = new TypeToken<FuturesPriceTriggeredOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single order (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param orderId ID returned on order successfully being created (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPriceTriggeredDeliveryOrderAsync(String settle, String orderId, final ApiCallback<FuturesPriceTriggeredOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPriceTriggeredDeliveryOrderValidateBeforeCall(settle, orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FuturesPriceTriggeredOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDeliveryAccountBook
     * @param settle Settle currency (required)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param from Start timestamp (optional)
     * @param to End timestamp (optional)
     * @param type Changing Type: - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit &amp; Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDeliveryAccountBookCall(String settle, Integer limit, Integer from, Integer to, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/account_book"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (from != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        }

        if (type != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDeliveryAccountBookValidateBeforeCall(String settle, Integer limit, Integer from, Integer to, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling listDeliveryAccountBook(Async)");
        }
        

        com.squareup.okhttp.Call call = listDeliveryAccountBookCall(settle, limit, from, to, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query account book
     * 
     * @param settle Settle currency (required)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param from Start timestamp (optional)
     * @param to End timestamp (optional)
     * @param type Changing Type: - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit &amp; Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)
     * @return List&lt;FuturesAccountBook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FuturesAccountBook> listDeliveryAccountBook(String settle, Integer limit, Integer from, Integer to, String type) throws ApiException {
        ApiResponse<List<FuturesAccountBook>> resp = listDeliveryAccountBookWithHttpInfo(settle, limit, from, to, type);
        return resp.getData();
    }

    /**
     * Query account book
     * 
     * @param settle Settle currency (required)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param from Start timestamp (optional)
     * @param to End timestamp (optional)
     * @param type Changing Type: - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit &amp; Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)
     * @return ApiResponse&lt;List&lt;FuturesAccountBook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FuturesAccountBook>> listDeliveryAccountBookWithHttpInfo(String settle, Integer limit, Integer from, Integer to, String type) throws ApiException {
        com.squareup.okhttp.Call call = listDeliveryAccountBookValidateBeforeCall(settle, limit, from, to, type, null, null);
        Type localVarReturnType = new TypeToken<List<FuturesAccountBook>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query account book (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param from Start timestamp (optional)
     * @param to End timestamp (optional)
     * @param type Changing Type: - dnw: Deposit &amp; Withdraw - pnl: Profit &amp; Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit &amp; Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDeliveryAccountBookAsync(String settle, Integer limit, Integer from, Integer to, String type, final ApiCallback<List<FuturesAccountBook>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDeliveryAccountBookValidateBeforeCall(settle, limit, from, to, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FuturesAccountBook>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDeliveryAccounts
     * @param settle Settle currency (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDeliveryAccountsCall(String settle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/accounts"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDeliveryAccountsValidateBeforeCall(String settle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling listDeliveryAccounts(Async)");
        }
        

        com.squareup.okhttp.Call call = listDeliveryAccountsCall(settle, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Query futures account
     * 
     * @param settle Settle currency (required)
     * @return FuturesAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FuturesAccount listDeliveryAccounts(String settle) throws ApiException {
        ApiResponse<FuturesAccount> resp = listDeliveryAccountsWithHttpInfo(settle);
        return resp.getData();
    }

    /**
     * Query futures account
     * 
     * @param settle Settle currency (required)
     * @return ApiResponse&lt;FuturesAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FuturesAccount> listDeliveryAccountsWithHttpInfo(String settle) throws ApiException {
        com.squareup.okhttp.Call call = listDeliveryAccountsValidateBeforeCall(settle, null, null);
        Type localVarReturnType = new TypeToken<FuturesAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query futures account (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDeliveryAccountsAsync(String settle, final ApiCallback<FuturesAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDeliveryAccountsValidateBeforeCall(settle, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FuturesAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDeliveryCandlesticks
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param from Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)
     * @param to End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)
     * @param limit Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)
     * @param interval Interval time between data points (optional, default to 5m)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDeliveryCandlesticksCall(String settle, String contract, BigDecimal from, BigDecimal to, Integer limit, String interval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/candlesticks"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contract != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contract", contract));
        }

        if (from != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (interval != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("interval", interval));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDeliveryCandlesticksValidateBeforeCall(String settle, String contract, BigDecimal from, BigDecimal to, Integer limit, String interval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling listDeliveryCandlesticks(Async)");
        }
        
        // verify the required parameter 'contract' is set
        if (contract == null) {
            throw new ApiException("Missing the required parameter 'contract' when calling listDeliveryCandlesticks(Async)");
        }
        

        com.squareup.okhttp.Call call = listDeliveryCandlesticksCall(settle, contract, from, to, limit, interval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get futures candlesticks
     * Return specified contract candlesticks. If prefix &#x60;contract&#x60; with &#x60;mark_&#x60;, the contract&#39;s mark price candlesticks are returned; if prefix with &#x60;index_&#x60;, index price candlesticks will be returned.  Maximum of 2000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param from Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)
     * @param to End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)
     * @param limit Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)
     * @param interval Interval time between data points (optional, default to 5m)
     * @return List&lt;FuturesCandlestick&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FuturesCandlestick> listDeliveryCandlesticks(String settle, String contract, BigDecimal from, BigDecimal to, Integer limit, String interval) throws ApiException {
        ApiResponse<List<FuturesCandlestick>> resp = listDeliveryCandlesticksWithHttpInfo(settle, contract, from, to, limit, interval);
        return resp.getData();
    }

    /**
     * Get futures candlesticks
     * Return specified contract candlesticks. If prefix &#x60;contract&#x60; with &#x60;mark_&#x60;, the contract&#39;s mark price candlesticks are returned; if prefix with &#x60;index_&#x60;, index price candlesticks will be returned.  Maximum of 2000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param from Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)
     * @param to End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)
     * @param limit Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)
     * @param interval Interval time between data points (optional, default to 5m)
     * @return ApiResponse&lt;List&lt;FuturesCandlestick&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FuturesCandlestick>> listDeliveryCandlesticksWithHttpInfo(String settle, String contract, BigDecimal from, BigDecimal to, Integer limit, String interval) throws ApiException {
        com.squareup.okhttp.Call call = listDeliveryCandlesticksValidateBeforeCall(settle, contract, from, to, limit, interval, null, null);
        Type localVarReturnType = new TypeToken<List<FuturesCandlestick>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get futures candlesticks (asynchronously)
     * Return specified contract candlesticks. If prefix &#x60;contract&#x60; with &#x60;mark_&#x60;, the contract&#39;s mark price candlesticks are returned; if prefix with &#x60;index_&#x60;, index price candlesticks will be returned.  Maximum of 2000 points are returned in one query. Be sure not to exceed the limit when specifying &#x60;from&#x60;, &#x60;to&#x60; and &#x60;interval&#x60;
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param from Start time of candlesticks, formatted in Unix timestamp in seconds. Default to&#x60;to - 100 * interval&#x60; if not specified (optional)
     * @param to End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)
     * @param limit Maximum recent data points returned. &#x60;limit&#x60; is conflicted with &#x60;from&#x60; and &#x60;to&#x60;. If either &#x60;from&#x60; or &#x60;to&#x60; is specified, request will be rejected. (optional, default to 100)
     * @param interval Interval time between data points (optional, default to 5m)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDeliveryCandlesticksAsync(String settle, String contract, BigDecimal from, BigDecimal to, Integer limit, String interval, final ApiCallback<List<FuturesCandlestick>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDeliveryCandlesticksValidateBeforeCall(settle, contract, from, to, limit, interval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FuturesCandlestick>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDeliveryContracts
     * @param settle Settle currency (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDeliveryContractsCall(String settle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/contracts"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDeliveryContractsValidateBeforeCall(String settle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling listDeliveryContracts(Async)");
        }
        

        com.squareup.okhttp.Call call = listDeliveryContractsCall(settle, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all futures contracts
     * 
     * @param settle Settle currency (required)
     * @return List&lt;DeliveryContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DeliveryContract> listDeliveryContracts(String settle) throws ApiException {
        ApiResponse<List<DeliveryContract>> resp = listDeliveryContractsWithHttpInfo(settle);
        return resp.getData();
    }

    /**
     * List all futures contracts
     * 
     * @param settle Settle currency (required)
     * @return ApiResponse&lt;List&lt;DeliveryContract&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DeliveryContract>> listDeliveryContractsWithHttpInfo(String settle) throws ApiException {
        com.squareup.okhttp.Call call = listDeliveryContractsValidateBeforeCall(settle, null, null);
        Type localVarReturnType = new TypeToken<List<DeliveryContract>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all futures contracts (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDeliveryContractsAsync(String settle, final ApiCallback<List<DeliveryContract>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDeliveryContractsValidateBeforeCall(settle, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DeliveryContract>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDeliveryInsuranceLedger
     * @param settle Settle currency (required)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDeliveryInsuranceLedgerCall(String settle, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/insurance"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDeliveryInsuranceLedgerValidateBeforeCall(String settle, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling listDeliveryInsuranceLedger(Async)");
        }
        

        com.squareup.okhttp.Call call = listDeliveryInsuranceLedgerCall(settle, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Futures insurance balance history
     * 
     * @param settle Settle currency (required)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @return List&lt;InsuranceRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<InsuranceRecord> listDeliveryInsuranceLedger(String settle, Integer limit) throws ApiException {
        ApiResponse<List<InsuranceRecord>> resp = listDeliveryInsuranceLedgerWithHttpInfo(settle, limit);
        return resp.getData();
    }

    /**
     * Futures insurance balance history
     * 
     * @param settle Settle currency (required)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @return ApiResponse&lt;List&lt;InsuranceRecord&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<InsuranceRecord>> listDeliveryInsuranceLedgerWithHttpInfo(String settle, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = listDeliveryInsuranceLedgerValidateBeforeCall(settle, limit, null, null);
        Type localVarReturnType = new TypeToken<List<InsuranceRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Futures insurance balance history (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDeliveryInsuranceLedgerAsync(String settle, Integer limit, final ApiCallback<List<InsuranceRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDeliveryInsuranceLedgerValidateBeforeCall(settle, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InsuranceRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDeliveryLiquidates
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param at Specify a liquidation timestamp (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDeliveryLiquidatesCall(String settle, String contract, Integer limit, Integer at, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/liquidates"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contract != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contract", contract));
        }

        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDeliveryLiquidatesValidateBeforeCall(String settle, String contract, Integer limit, Integer at, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling listDeliveryLiquidates(Async)");
        }
        

        com.squareup.okhttp.Call call = listDeliveryLiquidatesCall(settle, contract, limit, at, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List liquidation history
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param at Specify a liquidation timestamp (optional, default to 0)
     * @return List&lt;FuturesLiquidate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FuturesLiquidate> listDeliveryLiquidates(String settle, String contract, Integer limit, Integer at) throws ApiException {
        ApiResponse<List<FuturesLiquidate>> resp = listDeliveryLiquidatesWithHttpInfo(settle, contract, limit, at);
        return resp.getData();
    }

    /**
     * List liquidation history
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param at Specify a liquidation timestamp (optional, default to 0)
     * @return ApiResponse&lt;List&lt;FuturesLiquidate&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FuturesLiquidate>> listDeliveryLiquidatesWithHttpInfo(String settle, String contract, Integer limit, Integer at) throws ApiException {
        com.squareup.okhttp.Call call = listDeliveryLiquidatesValidateBeforeCall(settle, contract, limit, at, null, null);
        Type localVarReturnType = new TypeToken<List<FuturesLiquidate>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List liquidation history (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param at Specify a liquidation timestamp (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDeliveryLiquidatesAsync(String settle, String contract, Integer limit, Integer at, final ApiCallback<List<FuturesLiquidate>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDeliveryLiquidatesValidateBeforeCall(settle, contract, limit, at, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FuturesLiquidate>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDeliveryOrderBook
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param interval Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)
     * @param limit Maximum number of order depth data in asks or bids (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDeliveryOrderBookCall(String settle, String contract, String interval, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/order_book"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contract != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contract", contract));
        }

        if (interval != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("interval", interval));
        }

        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDeliveryOrderBookValidateBeforeCall(String settle, String contract, String interval, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling listDeliveryOrderBook(Async)");
        }
        
        // verify the required parameter 'contract' is set
        if (contract == null) {
            throw new ApiException("Missing the required parameter 'contract' when calling listDeliveryOrderBook(Async)");
        }
        

        com.squareup.okhttp.Call call = listDeliveryOrderBookCall(settle, contract, interval, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Futures order book
     * Bids will be sorted by price from high to low, while asks sorted reversely
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param interval Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)
     * @param limit Maximum number of order depth data in asks or bids (optional, default to 10)
     * @return FuturesOrderBook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FuturesOrderBook listDeliveryOrderBook(String settle, String contract, String interval, Integer limit) throws ApiException {
        ApiResponse<FuturesOrderBook> resp = listDeliveryOrderBookWithHttpInfo(settle, contract, interval, limit);
        return resp.getData();
    }

    /**
     * Futures order book
     * Bids will be sorted by price from high to low, while asks sorted reversely
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param interval Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)
     * @param limit Maximum number of order depth data in asks or bids (optional, default to 10)
     * @return ApiResponse&lt;FuturesOrderBook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FuturesOrderBook> listDeliveryOrderBookWithHttpInfo(String settle, String contract, String interval, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = listDeliveryOrderBookValidateBeforeCall(settle, contract, interval, limit, null, null);
        Type localVarReturnType = new TypeToken<FuturesOrderBook>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Futures order book (asynchronously)
     * Bids will be sorted by price from high to low, while asks sorted reversely
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param interval Order depth. 0 means no aggregation is applied. default to 0 (optional, default to 0)
     * @param limit Maximum number of order depth data in asks or bids (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDeliveryOrderBookAsync(String settle, String contract, String interval, Integer limit, final ApiCallback<FuturesOrderBook> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDeliveryOrderBookValidateBeforeCall(settle, contract, interval, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FuturesOrderBook>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDeliveryOrders
     * @param settle Settle currency (required)
     * @param status List orders based on status (required)
     * @param contract Futures contract (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @param lastId Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param countTotal Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDeliveryOrdersCall(String settle, String status, String contract, Integer limit, Integer offset, String lastId, Integer countTotal, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/orders"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contract != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contract", contract));
        }

        if (status != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        }

        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        }

        if (lastId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("last_id", lastId));
        }

        if (countTotal != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("count_total", countTotal));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDeliveryOrdersValidateBeforeCall(String settle, String status, String contract, Integer limit, Integer offset, String lastId, Integer countTotal, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling listDeliveryOrders(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling listDeliveryOrders(Async)");
        }
        

        com.squareup.okhttp.Call call = listDeliveryOrdersCall(settle, status, contract, limit, offset, lastId, countTotal, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List futures orders
     * Zero-fill order cannot be retrieved 60 seconds after cancellation
     * @param settle Settle currency (required)
     * @param status List orders based on status (required)
     * @param contract Futures contract (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @param lastId Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param countTotal Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     * @return List&lt;FuturesOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FuturesOrder> listDeliveryOrders(String settle, String status, String contract, Integer limit, Integer offset, String lastId, Integer countTotal) throws ApiException {
        ApiResponse<List<FuturesOrder>> resp = listDeliveryOrdersWithHttpInfo(settle, status, contract, limit, offset, lastId, countTotal);
        return resp.getData();
    }

    /**
     * List futures orders
     * Zero-fill order cannot be retrieved 60 seconds after cancellation
     * @param settle Settle currency (required)
     * @param status List orders based on status (required)
     * @param contract Futures contract (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @param lastId Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param countTotal Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     * @return ApiResponse&lt;List&lt;FuturesOrder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FuturesOrder>> listDeliveryOrdersWithHttpInfo(String settle, String status, String contract, Integer limit, Integer offset, String lastId, Integer countTotal) throws ApiException {
        com.squareup.okhttp.Call call = listDeliveryOrdersValidateBeforeCall(settle, status, contract, limit, offset, lastId, countTotal, null, null);
        Type localVarReturnType = new TypeToken<List<FuturesOrder>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List futures orders (asynchronously)
     * Zero-fill order cannot be retrieved 60 seconds after cancellation
     * @param settle Settle currency (required)
     * @param status List orders based on status (required)
     * @param contract Futures contract (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @param lastId Specify list staring point using the &#x60;id&#x60; of last record in previous list-query results (optional)
     * @param countTotal Whether to return total number matched. Default to 0(no return) (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDeliveryOrdersAsync(String settle, String status, String contract, Integer limit, Integer offset, String lastId, Integer countTotal, final ApiCallback<List<FuturesOrder>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDeliveryOrdersValidateBeforeCall(settle, status, contract, limit, offset, lastId, countTotal, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FuturesOrder>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDeliveryPositionClose
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDeliveryPositionCloseCall(String settle, String contract, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/position_close"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contract != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contract", contract));
        }

        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDeliveryPositionCloseValidateBeforeCall(String settle, String contract, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling listDeliveryPositionClose(Async)");
        }
        

        com.squareup.okhttp.Call call = listDeliveryPositionCloseCall(settle, contract, limit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List position close history
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @return List&lt;PositionClose&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PositionClose> listDeliveryPositionClose(String settle, String contract, Integer limit) throws ApiException {
        ApiResponse<List<PositionClose>> resp = listDeliveryPositionCloseWithHttpInfo(settle, contract, limit);
        return resp.getData();
    }

    /**
     * List position close history
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @return ApiResponse&lt;List&lt;PositionClose&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PositionClose>> listDeliveryPositionCloseWithHttpInfo(String settle, String contract, Integer limit) throws ApiException {
        com.squareup.okhttp.Call call = listDeliveryPositionCloseValidateBeforeCall(settle, contract, limit, null, null);
        Type localVarReturnType = new TypeToken<List<PositionClose>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List position close history (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDeliveryPositionCloseAsync(String settle, String contract, Integer limit, final ApiCallback<List<PositionClose>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDeliveryPositionCloseValidateBeforeCall(settle, contract, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PositionClose>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDeliveryPositions
     * @param settle Settle currency (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDeliveryPositionsCall(String settle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/positions"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDeliveryPositionsValidateBeforeCall(String settle, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling listDeliveryPositions(Async)");
        }
        

        com.squareup.okhttp.Call call = listDeliveryPositionsCall(settle, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all positions of a user
     * 
     * @param settle Settle currency (required)
     * @return List&lt;Position&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Position> listDeliveryPositions(String settle) throws ApiException {
        ApiResponse<List<Position>> resp = listDeliveryPositionsWithHttpInfo(settle);
        return resp.getData();
    }

    /**
     * List all positions of a user
     * 
     * @param settle Settle currency (required)
     * @return ApiResponse&lt;List&lt;Position&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Position>> listDeliveryPositionsWithHttpInfo(String settle) throws ApiException {
        com.squareup.okhttp.Call call = listDeliveryPositionsValidateBeforeCall(settle, null, null);
        Type localVarReturnType = new TypeToken<List<Position>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all positions of a user (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDeliveryPositionsAsync(String settle, final ApiCallback<List<Position>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDeliveryPositionsValidateBeforeCall(settle, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Position>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDeliverySettlements
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param at Specify a settlement timestamp (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDeliverySettlementsCall(String settle, String contract, Integer limit, Integer at, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/settlements"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contract != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contract", contract));
        }

        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDeliverySettlementsValidateBeforeCall(String settle, String contract, Integer limit, Integer at, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling listDeliverySettlements(Async)");
        }
        

        com.squareup.okhttp.Call call = listDeliverySettlementsCall(settle, contract, limit, at, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List settlement history
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param at Specify a settlement timestamp (optional, default to 0)
     * @return List&lt;DeliverySettlement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DeliverySettlement> listDeliverySettlements(String settle, String contract, Integer limit, Integer at) throws ApiException {
        ApiResponse<List<DeliverySettlement>> resp = listDeliverySettlementsWithHttpInfo(settle, contract, limit, at);
        return resp.getData();
    }

    /**
     * List settlement history
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param at Specify a settlement timestamp (optional, default to 0)
     * @return ApiResponse&lt;List&lt;DeliverySettlement&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DeliverySettlement>> listDeliverySettlementsWithHttpInfo(String settle, String contract, Integer limit, Integer at) throws ApiException {
        com.squareup.okhttp.Call call = listDeliverySettlementsValidateBeforeCall(settle, contract, limit, at, null, null);
        Type localVarReturnType = new TypeToken<List<DeliverySettlement>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List settlement history (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param at Specify a settlement timestamp (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDeliverySettlementsAsync(String settle, String contract, Integer limit, Integer at, final ApiCallback<List<DeliverySettlement>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDeliverySettlementsValidateBeforeCall(settle, contract, limit, at, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DeliverySettlement>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDeliveryTickers
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDeliveryTickersCall(String settle, String contract, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/tickers"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contract != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contract", contract));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDeliveryTickersValidateBeforeCall(String settle, String contract, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling listDeliveryTickers(Async)");
        }
        

        com.squareup.okhttp.Call call = listDeliveryTickersCall(settle, contract, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List futures tickers
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @return List&lt;FuturesTicker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FuturesTicker> listDeliveryTickers(String settle, String contract) throws ApiException {
        ApiResponse<List<FuturesTicker>> resp = listDeliveryTickersWithHttpInfo(settle, contract);
        return resp.getData();
    }

    /**
     * List futures tickers
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @return ApiResponse&lt;List&lt;FuturesTicker&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FuturesTicker>> listDeliveryTickersWithHttpInfo(String settle, String contract) throws ApiException {
        com.squareup.okhttp.Call call = listDeliveryTickersValidateBeforeCall(settle, contract, null, null);
        Type localVarReturnType = new TypeToken<List<FuturesTicker>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List futures tickers (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDeliveryTickersAsync(String settle, String contract, final ApiCallback<List<FuturesTicker>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDeliveryTickersValidateBeforeCall(settle, contract, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FuturesTicker>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDeliveryTrades
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param lastId Specify list staring point using the id of last record in previous list-query results  This parameter is deprecated. Use &#x60;from&#x60; and &#x60;to&#x60; instead to limit time range (optional)
     * @param from Specify starting time in Unix seconds. If not specified, &#x60;to&#x60; and &#x60;limit&#x60; will be used to limit response items. If items between &#x60;from&#x60; and &#x60;to&#x60; are more than &#x60;limit&#x60;, only &#x60;limit&#x60; number will be returned.  (optional)
     * @param to Specify end time in Unix seconds, default to current time (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDeliveryTradesCall(String settle, String contract, Integer limit, String lastId, BigDecimal from, BigDecimal to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/trades"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contract != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contract", contract));
        }

        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (lastId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("last_id", lastId));
        }

        if (from != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDeliveryTradesValidateBeforeCall(String settle, String contract, Integer limit, String lastId, BigDecimal from, BigDecimal to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling listDeliveryTrades(Async)");
        }
        
        // verify the required parameter 'contract' is set
        if (contract == null) {
            throw new ApiException("Missing the required parameter 'contract' when calling listDeliveryTrades(Async)");
        }
        

        com.squareup.okhttp.Call call = listDeliveryTradesCall(settle, contract, limit, lastId, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Futures trading history
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param lastId Specify list staring point using the id of last record in previous list-query results  This parameter is deprecated. Use &#x60;from&#x60; and &#x60;to&#x60; instead to limit time range (optional)
     * @param from Specify starting time in Unix seconds. If not specified, &#x60;to&#x60; and &#x60;limit&#x60; will be used to limit response items. If items between &#x60;from&#x60; and &#x60;to&#x60; are more than &#x60;limit&#x60;, only &#x60;limit&#x60; number will be returned.  (optional)
     * @param to Specify end time in Unix seconds, default to current time (optional)
     * @return List&lt;FuturesTrade&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FuturesTrade> listDeliveryTrades(String settle, String contract, Integer limit, String lastId, BigDecimal from, BigDecimal to) throws ApiException {
        ApiResponse<List<FuturesTrade>> resp = listDeliveryTradesWithHttpInfo(settle, contract, limit, lastId, from, to);
        return resp.getData();
    }

    /**
     * Futures trading history
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param lastId Specify list staring point using the id of last record in previous list-query results  This parameter is deprecated. Use &#x60;from&#x60; and &#x60;to&#x60; instead to limit time range (optional)
     * @param from Specify starting time in Unix seconds. If not specified, &#x60;to&#x60; and &#x60;limit&#x60; will be used to limit response items. If items between &#x60;from&#x60; and &#x60;to&#x60; are more than &#x60;limit&#x60;, only &#x60;limit&#x60; number will be returned.  (optional)
     * @param to Specify end time in Unix seconds, default to current time (optional)
     * @return ApiResponse&lt;List&lt;FuturesTrade&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FuturesTrade>> listDeliveryTradesWithHttpInfo(String settle, String contract, Integer limit, String lastId, BigDecimal from, BigDecimal to) throws ApiException {
        com.squareup.okhttp.Call call = listDeliveryTradesValidateBeforeCall(settle, contract, limit, lastId, from, to, null, null);
        Type localVarReturnType = new TypeToken<List<FuturesTrade>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Futures trading history (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param lastId Specify list staring point using the id of last record in previous list-query results  This parameter is deprecated. Use &#x60;from&#x60; and &#x60;to&#x60; instead to limit time range (optional)
     * @param from Specify starting time in Unix seconds. If not specified, &#x60;to&#x60; and &#x60;limit&#x60; will be used to limit response items. If items between &#x60;from&#x60; and &#x60;to&#x60; are more than &#x60;limit&#x60;, only &#x60;limit&#x60; number will be returned.  (optional)
     * @param to Specify end time in Unix seconds, default to current time (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDeliveryTradesAsync(String settle, String contract, Integer limit, String lastId, BigDecimal from, BigDecimal to, final ApiCallback<List<FuturesTrade>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDeliveryTradesValidateBeforeCall(settle, contract, limit, lastId, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FuturesTrade>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listPriceTriggeredDeliveryOrders
     * @param settle Settle currency (required)
     * @param status List orders based on status (required)
     * @param contract Futures contract, return related data only if specified (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listPriceTriggeredDeliveryOrdersCall(String settle, String status, String contract, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/price_orders"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        }

        if (contract != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contract", contract));
        }

        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listPriceTriggeredDeliveryOrdersValidateBeforeCall(String settle, String status, String contract, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling listPriceTriggeredDeliveryOrders(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling listPriceTriggeredDeliveryOrders(Async)");
        }
        

        com.squareup.okhttp.Call call = listPriceTriggeredDeliveryOrdersCall(settle, status, contract, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all auto orders
     * 
     * @param settle Settle currency (required)
     * @param status List orders based on status (required)
     * @param contract Futures contract, return related data only if specified (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @return List&lt;FuturesPriceTriggeredOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FuturesPriceTriggeredOrder> listPriceTriggeredDeliveryOrders(String settle, String status, String contract, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<FuturesPriceTriggeredOrder>> resp = listPriceTriggeredDeliveryOrdersWithHttpInfo(settle, status, contract, limit, offset);
        return resp.getData();
    }

    /**
     * List all auto orders
     * 
     * @param settle Settle currency (required)
     * @param status List orders based on status (required)
     * @param contract Futures contract, return related data only if specified (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @return ApiResponse&lt;List&lt;FuturesPriceTriggeredOrder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FuturesPriceTriggeredOrder>> listPriceTriggeredDeliveryOrdersWithHttpInfo(String settle, String status, String contract, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = listPriceTriggeredDeliveryOrdersValidateBeforeCall(settle, status, contract, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<List<FuturesPriceTriggeredOrder>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all auto orders (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param status List orders based on status (required)
     * @param contract Futures contract, return related data only if specified (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPriceTriggeredDeliveryOrdersAsync(String settle, String status, String contract, Integer limit, Integer offset, final ApiCallback<List<FuturesPriceTriggeredOrder>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPriceTriggeredDeliveryOrdersValidateBeforeCall(settle, status, contract, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FuturesPriceTriggeredOrder>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDeliveryPositionLeverage
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param leverage New position leverage (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDeliveryPositionLeverageCall(String settle, String contract, String leverage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/positions/{contract}/leverage"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()))
            .replaceAll("\\{" + "contract" + "\\}", apiClient.escapeString(contract.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (leverage != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("leverage", leverage));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDeliveryPositionLeverageValidateBeforeCall(String settle, String contract, String leverage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling updateDeliveryPositionLeverage(Async)");
        }
        
        // verify the required parameter 'contract' is set
        if (contract == null) {
            throw new ApiException("Missing the required parameter 'contract' when calling updateDeliveryPositionLeverage(Async)");
        }
        
        // verify the required parameter 'leverage' is set
        if (leverage == null) {
            throw new ApiException("Missing the required parameter 'leverage' when calling updateDeliveryPositionLeverage(Async)");
        }
        

        com.squareup.okhttp.Call call = updateDeliveryPositionLeverageCall(settle, contract, leverage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update position leverage
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param leverage New position leverage (required)
     * @return Position
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Position updateDeliveryPositionLeverage(String settle, String contract, String leverage) throws ApiException {
        ApiResponse<Position> resp = updateDeliveryPositionLeverageWithHttpInfo(settle, contract, leverage);
        return resp.getData();
    }

    /**
     * Update position leverage
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param leverage New position leverage (required)
     * @return ApiResponse&lt;Position&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Position> updateDeliveryPositionLeverageWithHttpInfo(String settle, String contract, String leverage) throws ApiException {
        com.squareup.okhttp.Call call = updateDeliveryPositionLeverageValidateBeforeCall(settle, contract, leverage, null, null);
        Type localVarReturnType = new TypeToken<Position>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update position leverage (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param leverage New position leverage (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDeliveryPositionLeverageAsync(String settle, String contract, String leverage, final ApiCallback<Position> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDeliveryPositionLeverageValidateBeforeCall(settle, contract, leverage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Position>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDeliveryPositionMargin
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param change Margin change. Use positive number to increase margin, negative number otherwise. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDeliveryPositionMarginCall(String settle, String contract, String change, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/positions/{contract}/margin"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()))
            .replaceAll("\\{" + "contract" + "\\}", apiClient.escapeString(contract.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (change != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("change", change));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDeliveryPositionMarginValidateBeforeCall(String settle, String contract, String change, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling updateDeliveryPositionMargin(Async)");
        }
        
        // verify the required parameter 'contract' is set
        if (contract == null) {
            throw new ApiException("Missing the required parameter 'contract' when calling updateDeliveryPositionMargin(Async)");
        }
        
        // verify the required parameter 'change' is set
        if (change == null) {
            throw new ApiException("Missing the required parameter 'change' when calling updateDeliveryPositionMargin(Async)");
        }
        

        com.squareup.okhttp.Call call = updateDeliveryPositionMarginCall(settle, contract, change, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update position margin
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param change Margin change. Use positive number to increase margin, negative number otherwise. (required)
     * @return Position
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Position updateDeliveryPositionMargin(String settle, String contract, String change) throws ApiException {
        ApiResponse<Position> resp = updateDeliveryPositionMarginWithHttpInfo(settle, contract, change);
        return resp.getData();
    }

    /**
     * Update position margin
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param change Margin change. Use positive number to increase margin, negative number otherwise. (required)
     * @return ApiResponse&lt;Position&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Position> updateDeliveryPositionMarginWithHttpInfo(String settle, String contract, String change) throws ApiException {
        com.squareup.okhttp.Call call = updateDeliveryPositionMarginValidateBeforeCall(settle, contract, change, null, null);
        Type localVarReturnType = new TypeToken<Position>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update position margin (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param change Margin change. Use positive number to increase margin, negative number otherwise. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDeliveryPositionMarginAsync(String settle, String contract, String change, final ApiCallback<Position> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDeliveryPositionMarginValidateBeforeCall(settle, contract, change, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Position>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDeliveryPositionRiskLimit
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param riskLimit New position risk limit (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDeliveryPositionRiskLimitCall(String settle, String contract, String riskLimit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delivery/{settle}/positions/{contract}/risk_limit"
            .replaceAll("\\{" + "settle" + "\\}", apiClient.escapeString(settle.toString()))
            .replaceAll("\\{" + "contract" + "\\}", apiClient.escapeString(contract.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (riskLimit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("risk_limit", riskLimit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDeliveryPositionRiskLimitValidateBeforeCall(String settle, String contract, String riskLimit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'settle' is set
        if (settle == null) {
            throw new ApiException("Missing the required parameter 'settle' when calling updateDeliveryPositionRiskLimit(Async)");
        }
        
        // verify the required parameter 'contract' is set
        if (contract == null) {
            throw new ApiException("Missing the required parameter 'contract' when calling updateDeliveryPositionRiskLimit(Async)");
        }
        
        // verify the required parameter 'riskLimit' is set
        if (riskLimit == null) {
            throw new ApiException("Missing the required parameter 'riskLimit' when calling updateDeliveryPositionRiskLimit(Async)");
        }
        

        com.squareup.okhttp.Call call = updateDeliveryPositionRiskLimitCall(settle, contract, riskLimit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update position risk limit
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param riskLimit New position risk limit (required)
     * @return Position
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Position updateDeliveryPositionRiskLimit(String settle, String contract, String riskLimit) throws ApiException {
        ApiResponse<Position> resp = updateDeliveryPositionRiskLimitWithHttpInfo(settle, contract, riskLimit);
        return resp.getData();
    }

    /**
     * Update position risk limit
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param riskLimit New position risk limit (required)
     * @return ApiResponse&lt;Position&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Position> updateDeliveryPositionRiskLimitWithHttpInfo(String settle, String contract, String riskLimit) throws ApiException {
        com.squareup.okhttp.Call call = updateDeliveryPositionRiskLimitValidateBeforeCall(settle, contract, riskLimit, null, null);
        Type localVarReturnType = new TypeToken<Position>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update position risk limit (asynchronously)
     * 
     * @param settle Settle currency (required)
     * @param contract Futures contract (required)
     * @param riskLimit New position risk limit (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDeliveryPositionRiskLimitAsync(String settle, String contract, String riskLimit, final ApiCallback<Position> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDeliveryPositionRiskLimitValidateBeforeCall(settle, contract, riskLimit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Position>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
