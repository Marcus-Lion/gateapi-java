/*
 * Gate API v4
 * APIv4 provides spot, margin and futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.api;

import io.gate.gateapi.ApiCallback;
import io.gate.gateapi.ApiClient;
import io.gate.gateapi.ApiException;
import io.gate.gateapi.ApiResponse;
import io.gate.gateapi.Configuration;
import io.gate.gateapi.Pair;
import io.gate.gateapi.ProgressRequestBody;
import io.gate.gateapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.gate.gateapi.models.DepositAddress;
import io.gate.gateapi.models.LedgerRecord;
import io.gate.gateapi.models.SubAccountTransfer;
import io.gate.gateapi.models.Transfer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WalletApi {
    private ApiClient apiClient;

    public WalletApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WalletApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getDepositAddress
     * @param currency Currency name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDepositAddressCall(String currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/deposit_address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("currency", currency));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDepositAddressValidateBeforeCall(String currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling getDepositAddress(Async)");
        }
        

        com.squareup.okhttp.Call call = getDepositAddressCall(currency, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Generate currency deposit address
     * 
     * @param currency Currency name (required)
     * @return DepositAddress
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DepositAddress getDepositAddress(String currency) throws ApiException {
        ApiResponse<DepositAddress> resp = getDepositAddressWithHttpInfo(currency);
        return resp.getData();
    }

    /**
     * Generate currency deposit address
     * 
     * @param currency Currency name (required)
     * @return ApiResponse&lt;DepositAddress&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DepositAddress> getDepositAddressWithHttpInfo(String currency) throws ApiException {
        com.squareup.okhttp.Call call = getDepositAddressValidateBeforeCall(currency, null, null);
        Type localVarReturnType = new TypeToken<DepositAddress>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generate currency deposit address (asynchronously)
     * 
     * @param currency Currency name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDepositAddressAsync(String currency, final ApiCallback<DepositAddress> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDepositAddressValidateBeforeCall(currency, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DepositAddress>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listDeposits
     * @param currency Filter by currency. Return all currency records if not specified (optional)
     * @param from Time range beginning, default to 7 days before current time (optional)
     * @param to Time range ending, default to current time (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listDepositsCall(String currency, Long from, Long to, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/deposits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("currency", currency));
        }

        if (from != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listDepositsValidateBeforeCall(String currency, Long from, Long to, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listDepositsCall(currency, from, to, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve deposit records
     * Record time range cannot exceed 30 days
     * @param currency Filter by currency. Return all currency records if not specified (optional)
     * @param from Time range beginning, default to 7 days before current time (optional)
     * @param to Time range ending, default to current time (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @return List&lt;LedgerRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LedgerRecord> listDeposits(String currency, Long from, Long to, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<LedgerRecord>> resp = listDepositsWithHttpInfo(currency, from, to, limit, offset);
        return resp.getData();
    }

    /**
     * Retrieve deposit records
     * Record time range cannot exceed 30 days
     * @param currency Filter by currency. Return all currency records if not specified (optional)
     * @param from Time range beginning, default to 7 days before current time (optional)
     * @param to Time range ending, default to current time (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @return ApiResponse&lt;List&lt;LedgerRecord&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LedgerRecord>> listDepositsWithHttpInfo(String currency, Long from, Long to, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = listDepositsValidateBeforeCall(currency, from, to, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<List<LedgerRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve deposit records (asynchronously)
     * Record time range cannot exceed 30 days
     * @param currency Filter by currency. Return all currency records if not specified (optional)
     * @param from Time range beginning, default to 7 days before current time (optional)
     * @param to Time range ending, default to current time (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listDepositsAsync(String currency, Long from, Long to, Integer limit, Integer offset, final ApiCallback<List<LedgerRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listDepositsValidateBeforeCall(currency, from, to, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LedgerRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listSubAccountTransfers
     * @param subUid Sub account user ID. Return records related to all sub accounts if not specified (optional)
     * @param from Time range beginning, default to 7 days before current time (optional)
     * @param to Time range ending, default to current time (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listSubAccountTransfersCall(String subUid, Long from, Long to, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/sub_account_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (subUid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sub_uid", subUid));
        }

        if (from != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listSubAccountTransfersValidateBeforeCall(String subUid, Long from, Long to, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listSubAccountTransfersCall(subUid, from, to, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Transfer records between main and sub accounts
     * Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
     * @param subUid Sub account user ID. Return records related to all sub accounts if not specified (optional)
     * @param from Time range beginning, default to 7 days before current time (optional)
     * @param to Time range ending, default to current time (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @return List&lt;SubAccountTransfer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SubAccountTransfer> listSubAccountTransfers(String subUid, Long from, Long to, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<SubAccountTransfer>> resp = listSubAccountTransfersWithHttpInfo(subUid, from, to, limit, offset);
        return resp.getData();
    }

    /**
     * Transfer records between main and sub accounts
     * Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
     * @param subUid Sub account user ID. Return records related to all sub accounts if not specified (optional)
     * @param from Time range beginning, default to 7 days before current time (optional)
     * @param to Time range ending, default to current time (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @return ApiResponse&lt;List&lt;SubAccountTransfer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SubAccountTransfer>> listSubAccountTransfersWithHttpInfo(String subUid, Long from, Long to, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = listSubAccountTransfersValidateBeforeCall(subUid, from, to, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<List<SubAccountTransfer>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Transfer records between main and sub accounts (asynchronously)
     * Record time range cannot exceed 30 days  &gt; Note: only records after 2020-04-10 can be retrieved
     * @param subUid Sub account user ID. Return records related to all sub accounts if not specified (optional)
     * @param from Time range beginning, default to 7 days before current time (optional)
     * @param to Time range ending, default to current time (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listSubAccountTransfersAsync(String subUid, Long from, Long to, Integer limit, Integer offset, final ApiCallback<List<SubAccountTransfer>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listSubAccountTransfersValidateBeforeCall(subUid, from, to, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SubAccountTransfer>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listWithdrawals
     * @param currency Filter by currency. Return all currency records if not specified (optional)
     * @param from Time range beginning, default to 7 days before current time (optional)
     * @param to Time range ending, default to current time (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listWithdrawalsCall(String currency, Long from, Long to, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/wallet/withdrawals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("currency", currency));
        }

        if (from != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        }

        if (limit != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listWithdrawalsValidateBeforeCall(String currency, Long from, Long to, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listWithdrawalsCall(currency, from, to, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve withdrawal records
     * Record time range cannot exceed 30 days
     * @param currency Filter by currency. Return all currency records if not specified (optional)
     * @param from Time range beginning, default to 7 days before current time (optional)
     * @param to Time range ending, default to current time (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @return List&lt;LedgerRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LedgerRecord> listWithdrawals(String currency, Long from, Long to, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<LedgerRecord>> resp = listWithdrawalsWithHttpInfo(currency, from, to, limit, offset);
        return resp.getData();
    }

    /**
     * Retrieve withdrawal records
     * Record time range cannot exceed 30 days
     * @param currency Filter by currency. Return all currency records if not specified (optional)
     * @param from Time range beginning, default to 7 days before current time (optional)
     * @param to Time range ending, default to current time (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @return ApiResponse&lt;List&lt;LedgerRecord&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LedgerRecord>> listWithdrawalsWithHttpInfo(String currency, Long from, Long to, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = listWithdrawalsValidateBeforeCall(currency, from, to, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<List<LedgerRecord>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve withdrawal records (asynchronously)
     * Record time range cannot exceed 30 days
     * @param currency Filter by currency. Return all currency records if not specified (optional)
     * @param from Time range beginning, default to 7 days before current time (optional)
     * @param to Time range ending, default to current time (optional)
     * @param limit Maximum number of records returned in one list (optional, default to 100)
     * @param offset List offset, starting from 0 (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listWithdrawalsAsync(String currency, Long from, Long to, Integer limit, Integer offset, final ApiCallback<List<LedgerRecord>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listWithdrawalsValidateBeforeCall(currency, from, to, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<LedgerRecord>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transfer
     * @param transfer  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferCall(Transfer transfer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transfer;

        // create path and map variables
        String localVarPath = "/wallet/transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferValidateBeforeCall(Transfer transfer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transfer' is set
        if (transfer == null) {
            throw new ApiException("Missing the required parameter 'transfer' when calling transfer(Async)");
        }
        

        com.squareup.okhttp.Call call = transferCall(transfer, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Transfer between accounts
     * Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 2. spot - delivery
     * @param transfer  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void transfer(Transfer transfer) throws ApiException {
        transferWithHttpInfo(transfer);
    }

    /**
     * Transfer between accounts
     * Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 2. spot - delivery
     * @param transfer  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> transferWithHttpInfo(Transfer transfer) throws ApiException {
        com.squareup.okhttp.Call call = transferValidateBeforeCall(transfer, null, null);
        return apiClient.execute(call);
    }

    /**
     * Transfer between accounts (asynchronously)
     * Transfer between different accounts. Currently support transfers between the following:  1. spot - margin 2. spot - futures(perpetual) 2. spot - delivery
     * @param transfer  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferAsync(Transfer transfer, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferValidateBeforeCall(transfer, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for transferWithSubAccount
     * @param subAccountTransfer  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transferWithSubAccountCall(SubAccountTransfer subAccountTransfer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = subAccountTransfer;

        // create path and map variables
        String localVarPath = "/wallet/sub_account_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiv4" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transferWithSubAccountValidateBeforeCall(SubAccountTransfer subAccountTransfer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'subAccountTransfer' is set
        if (subAccountTransfer == null) {
            throw new ApiException("Missing the required parameter 'subAccountTransfer' when calling transferWithSubAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = transferWithSubAccountCall(subAccountTransfer, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Transfer between main and sub accounts
     * 
     * @param subAccountTransfer  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void transferWithSubAccount(SubAccountTransfer subAccountTransfer) throws ApiException {
        transferWithSubAccountWithHttpInfo(subAccountTransfer);
    }

    /**
     * Transfer between main and sub accounts
     * 
     * @param subAccountTransfer  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> transferWithSubAccountWithHttpInfo(SubAccountTransfer subAccountTransfer) throws ApiException {
        com.squareup.okhttp.Call call = transferWithSubAccountValidateBeforeCall(subAccountTransfer, null, null);
        return apiClient.execute(call);
    }

    /**
     * Transfer between main and sub accounts (asynchronously)
     * 
     * @param subAccountTransfer  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transferWithSubAccountAsync(SubAccountTransfer subAccountTransfer, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transferWithSubAccountValidateBeforeCall(subAccountTransfer, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
