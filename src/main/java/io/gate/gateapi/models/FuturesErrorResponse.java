/*
 * Gate API v4
 * APIv4 futures provides all sorts of futures trading operations. There are public APIs to retrieve the real-time market statistics, and private APIs which needs authentication to trade on user's behalf.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@mail.gate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.gate.gateapi.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * 非 2xx 状态码是的异常描述信息
 */

public class FuturesErrorResponse {
  /**
   * 错误标识符，错误描述如下：  请求参数或格式问题:  - INVALID_PARAM_VALUE: 参数输入值无效 - INVALID_REQUEST_BODY: 无效请求体 - MISSING_REQUIRED_PARAM: 缺少必选参数 - DUPLICATE_REQUEST: 请求过于频繁  认证相关:  - INVALID_CREDENTIALS: 认证接口缺少用户认证信息 - NO_FUTURES_ACCOUNT: 用户无期货账户  业务相关:  - NO_MATCHING: 没有匹配的对手单 - NO_MARKING_PRICE: 合约当前无标记价格 - CONTRACT_NOT_FOUND: 合约未找到 - NOT_FOUND: 请求路径不存在 - RISK_LIMIT_EXCEEDED: 委托超出风险限额 - INSUFFICIENT_BALANCE: 余额不足 - POTENTIAL_LIQUIDATION: 操作可能导致爆仓 - LEVERAGE_TOO_HIGH: 杠杆倍数设置过高 - LEVERAGE_TOO_LOW: 杠杆倍数设置过低 - ORDER_NOT_FOUND: 委托不存在 - ORDER_FINISHED: 订单已结束 - TOO_MANY_ORDERS: 过多未交易的挂单 - POSITION_NOT_FOUND: 合约无头寸信息 - POSITION_CROSS_MARGIN: 全仓不支持更新保证金 - POSITION_LOCKED: 头寸当前被锁定 - TOO_MUCH_CHANGE: 保证金超过可调范围 - RISK_LIMIT_NOT_MULTIPLE: 风险限额未按照步长调整 - RISK_LIMIT_TOO_HIGH: 超出最大风险限额 - RISK_LIMIT_TOO_lOW: 风险限额设置过低 - PRICE_TOO_DEVIATED: 下单价与标记价格相差过大 - SIZE_TOO_LARGE: 下单数量超过上限 - SIZE_TOO_SMALL: 下单数量不足下限 - LIQUIDATION_PRICE_EXCEEDED: 补仓时价格不能超过平仓价 - POSITION_IN_CLOSE: 仓位正在平仓 - POTENTIAL_BANKRUPTCY: 下单若成交，保证金无法弥补损失  服务异常： - SERVER_ERROR: 内部错误 - TOO_BUSY: 服务当前忙 
   */
  @JsonAdapter(LabelEnum.Adapter.class)
  public enum LabelEnum {
    INVALID_PARAM_VALUE("INVALID_PARAM_VALUE"),
    
    INVALID_REQUEST_BODY("INVALID_REQUEST_BODY"),
    
    MISSING_REQUIRED_PARAM("MISSING_REQUIRED_PARAM"),
    
    INVALID_CREDENTIALS("INVALID_CREDENTIALS"),
    
    NO_FUTURES_ACCOUNT("NO_FUTURES_ACCOUNT"),
    
    DUPLICATE_REQUEST("DUPLICATE_REQUEST"),
    
    NO_MATCHING("NO_MATCHING"),
    
    NO_MARKING_PRICE("NO_MARKING_PRICE"),
    
    CONTRACT_NOT_FOUND("CONTRACT_NOT_FOUND"),
    
    NOT_FOUND("NOT_FOUND"),
    
    RISK_LIMIT_EXCEEDED("RISK_LIMIT_EXCEEDED"),
    
    INSUFFICIENT_BALANCE("INSUFFICIENT_BALANCE"),
    
    POTENTIAL_LIQUIDATION("POTENTIAL_LIQUIDATION"),
    
    LEVERAGE_TOO_HIGH("LEVERAGE_TOO_HIGH"),
    
    LEVERAGE_TOO_LOW("LEVERAGE_TOO_LOW"),
    
    ORDER_NOT_FOUND("ORDER_NOT_FOUND"),
    
    ORDER_FINISHED("ORDER_FINISHED"),
    
    TOO_MANY_ORDERS("TOO_MANY_ORDERS"),
    
    POSITION_NOT_FOUND("POSITION_NOT_FOUND"),
    
    POSITION_CROSS_MARGIN("POSITION_CROSS_MARGIN"),
    
    POSITION_LOCKED("POSITION_LOCKED"),
    
    TOO_MUCH_CHANGE("TOO_MUCH_CHANGE"),
    
    RISK_LIMIT_NOT_MULTIPLE("RISK_LIMIT_NOT_MULTIPLE"),
    
    RISK_LIMIT_TOO_HIGH("RISK_LIMIT_TOO_HIGH"),
    
    RISK_LIMIT_TOO_LOW("RISK_LIMIT_TOO_lOW"),
    
    PRICE_TOO_DEVIATED("PRICE_TOO_DEVIATED"),
    
    SIZE_TOO_LARGE("SIZE_TOO_LARGE"),
    
    SIZE_TOO_SMALL("SIZE_TOO_SMALL"),
    
    LIQUIDATION_PRICE_EXCEEDED("LIQUIDATION_PRICE_EXCEEDED"),
    
    POSITION_IN_CLOSE("POSITION_IN_CLOSE"),
    
    SERVER_ERROR("SERVER_ERROR"),
    
    TOO_BUSY("TOO_BUSY");

    private String value;

    LabelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LabelEnum fromValue(String text) {
      for (LabelEnum b : LabelEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + text + "'");
    }

    public static class Adapter extends TypeAdapter<LabelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LabelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LabelEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LabelEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private LabelEnum label;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public FuturesErrorResponse label(LabelEnum label) {
    this.label = label;
    return this;
  }

   /**
   * 错误标识符，错误描述如下：  请求参数或格式问题:  - INVALID_PARAM_VALUE: 参数输入值无效 - INVALID_REQUEST_BODY: 无效请求体 - MISSING_REQUIRED_PARAM: 缺少必选参数 - DUPLICATE_REQUEST: 请求过于频繁  认证相关:  - INVALID_CREDENTIALS: 认证接口缺少用户认证信息 - NO_FUTURES_ACCOUNT: 用户无期货账户  业务相关:  - NO_MATCHING: 没有匹配的对手单 - NO_MARKING_PRICE: 合约当前无标记价格 - CONTRACT_NOT_FOUND: 合约未找到 - NOT_FOUND: 请求路径不存在 - RISK_LIMIT_EXCEEDED: 委托超出风险限额 - INSUFFICIENT_BALANCE: 余额不足 - POTENTIAL_LIQUIDATION: 操作可能导致爆仓 - LEVERAGE_TOO_HIGH: 杠杆倍数设置过高 - LEVERAGE_TOO_LOW: 杠杆倍数设置过低 - ORDER_NOT_FOUND: 委托不存在 - ORDER_FINISHED: 订单已结束 - TOO_MANY_ORDERS: 过多未交易的挂单 - POSITION_NOT_FOUND: 合约无头寸信息 - POSITION_CROSS_MARGIN: 全仓不支持更新保证金 - POSITION_LOCKED: 头寸当前被锁定 - TOO_MUCH_CHANGE: 保证金超过可调范围 - RISK_LIMIT_NOT_MULTIPLE: 风险限额未按照步长调整 - RISK_LIMIT_TOO_HIGH: 超出最大风险限额 - RISK_LIMIT_TOO_lOW: 风险限额设置过低 - PRICE_TOO_DEVIATED: 下单价与标记价格相差过大 - SIZE_TOO_LARGE: 下单数量超过上限 - SIZE_TOO_SMALL: 下单数量不足下限 - LIQUIDATION_PRICE_EXCEEDED: 补仓时价格不能超过平仓价 - POSITION_IN_CLOSE: 仓位正在平仓 - POTENTIAL_BANKRUPTCY: 下单若成交，保证金无法弥补损失  服务异常： - SERVER_ERROR: 内部错误 - TOO_BUSY: 服务当前忙 
   * @return label
  **/
  public LabelEnum getLabel() {
    return label;
  }

  public void setLabel(LabelEnum label) {
    this.label = label;
  }

  public FuturesErrorResponse message(String message) {
    this.message = message;
    return this;
  }

   /**
   * 详细错误描述。如果指定了 &#x60;Accept-Language&#x60; 请求头部，且支持指定语言，则描述信息会返回对应的语言 
   * @return message
  **/
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FuturesErrorResponse futuresErrorResponse = (FuturesErrorResponse) o;
    return Objects.equals(this.label, futuresErrorResponse.label) &&
        Objects.equals(this.message, futuresErrorResponse.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, message);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FuturesErrorResponse {\n");
    
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

